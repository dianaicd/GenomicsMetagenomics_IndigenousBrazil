configfile: "multiple_purposes.yaml"
include: "parse_resources.smk"

def param_default(myDict, param, default):
    if param in myDict.keys():
        myVal = myDict[param]
    else:
        myVal = default 

    return(myVal)

##############
#     utils/fq2psmcfa -q20 diploid.fq.gz > diploid.psmcfa
#     psmc -N25 -t15 -r5 -p "4+25*2+4+6" -o diploid.psmc diploid.psmcfa
#     utils/psmc2history.pl diploid.psmc | utils/history2ms.pl > ms-cmd.sh
#     utils/psmc_plot.pl diploid diploid.psmc

# where `diploid.fq.gz' is typically the whole-genome diploid consensus sequence
# of one human individual, which can be generated by, for example:

#     samtools mpileup -C50 -uf ref.fa aln.bam | bcftools view -c - \
#       | vcfutils.pl vcf2fq -d 10 -D 100 | gzip > diploid.fq.gz

samples = list(config["psmc"]["samples"].keys())

rule all:
    input:
        psmc = expand("{sample}.diploid.psmc", sample = samples),
        ms_command = expand("{sample}_ms-cmd.sh", sample = samples),
        psmc_plot = expand("{sample}.diploid.eps", sample = samples)

rule link_utils:
    input:
        folder = param_default(config["psmc"], "path_utils", "/users/dcruzdav/Project_popgen/americas/install/psmc/utils/")
    output:
        utils = "utils/"
    shell:
        """
        ln -s {input.folder} .
        """

rule make_diploid_fq_chr:
    input:
        ref_genome = param_default(config, "ref_genome", "hs.build37.1.fa"),
        bam = lambda wildcards: config["psmc"]["samples"][wildcards.sample]
    output:
        diploid = temp("{sample}.diploid.{chr}.fq.gz")
    resources:
        memory=lambda wildcards, attempt: get_memory_alloc("psmc_consensus_mem", attempt, 4),
        runtime=lambda wildcards, attempt: get_runtime_alloc("psmc_consensus_time", attempt, 24)
    threads:
        get_threads("psmc_consensus_threads", 4)
    params:
        min_depth=param_default(config["psmc"], "min_depth", 10),
        max_depth=param_default(config["psmc"], "max_depth", 100)
    shell:
        """
        samtools mpileup -r {wildcards.chr} -C50 -uf {input.ref_genome} {input.bam} | bcftools call --threads {threads} -c - \
      | vcfutils.pl vcf2fq -d {params.min_depth} -D {params.max_depth} | gzip > {output.diploid}
        """

rule merge_diploid_fq:
    input:
        diploid = expand("{sample}.diploid.{chr}.fq.gz", chr = [str(i) for i in range(1,23)], sample = "{sample}")
    output:
        diploid = "{sample}.diploid.fq.gz"
    shell:
        """
        cat {input.diploid} > {output.diploid}
        """

rule consensus2fa:
    input:
        utils = "utils/",
        diploid = "{sample}.diploid.fq.gz"
    output:
        psmcfa = "{sample}.diploid.psmcfa"
    params:
        baseQ = param_default(config, "BaseQuality", 20)
    shell:
        """
        utils/fq2psmcfa -q {params.baseQ} {input.diploid} > {output.psmcfa}
        """

rule psmc:
    input:
        psmcfa = "{sample}.diploid.psmcfa"
    output:
        psmc = "{sample}.diploid.psmc"
    params:
        N = param_default(config["psmc"], "N", 25),
        t = param_default(config["psmc"], "t", 15),
        r = param_default(config["psmc"], "r", 5),
        p = param_default(config["psmc"], "p", "4+25*2+4+6")
    shell:
        """
        psmc -N {params.N} -t {params.t} -r {params.r} -p {params.p} -o {output.psmc} {input.psmcfa}
        """

rule ms_command:
    input:
        psmc = "{sample}.diploid.psmc"
    output:
        ms_cmd = "{sample}_ms-cmd.sh"
    shell:
        """
        utils/psmc2history.pl {input.psmc} | utils/history2ms.pl > {output.ms_cmd}
        """


rule psmc_plot:
    input:
        psmc = "{sample}.diploid.psmc"
    output:
        eps = "{sample}.diploid.eps"
    shell:
        """
        utils/psmc_plot.pl {wildcards.sample}.diploid {input.psmc}
        """